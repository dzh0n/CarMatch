// CarMatch Chat Integration - —Ç–æ–ª—å–∫–æ –±–æ–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
class CarMatchChat {
    constructor() {
        this.host = "https://carmatch.ru";
        this.chatMessages = document.getElementById('chatMessages');
        this.chatInput = document.getElementById('chatInput');
        this.sendButton = document.getElementById('sendButton');
        this.carRecommendations = document.getElementById('carRecommendations');
        
        this.conversationId = null;
        this.conversationStarted = false;
        this.carSwiper = null;
        this.isSending = false; // –§–ª–∞–≥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        this.pendingRecommendations = null; // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–∫–∞–∑–∞
        this.messageCount = 0; // –°—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        this.init();
    }
    
    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ cookies –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (localStorage.getItem('cookiesAccepted')) {
            this.enableChat();
        } else {
            this.disableChat();
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
        this.setupScrollProtection();
        
        // –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
        this.suppressExtensionErrors();

        // –•—ç—à—Ç–µ–≥–∏ —É–±—Ä–∞–Ω—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    }
    
    suppressExtensionErrors() {
        // –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
        window.addEventListener('error', (e) => {
            if (e.message && e.message.includes('message channel closed')) {
                e.preventDefault();
                return true;
            }
        });
        
        window.addEventListener('unhandledrejection', (e) => {
            if (e.reason && e.reason.message && e.reason.message.includes('message channel closed')) {
                e.preventDefault();
                return true;
            }
        });
    }
    
    setupScrollProtection() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–æ–º –∏ Swiper'–æ–º
        document.addEventListener('DOMContentLoaded', () => {
            const carSection = document.querySelector('[data-section="6"]');
            if (carSection) {
                let isInCarSection = false;
                
                // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–µ–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        isInCarSection = entry.isIntersecting;
                    });
                }, { threshold: 0.3 });
                
                observer.observe(carSection);
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ (passive)
                document.addEventListener('wheel', (e) => {
                    if (isInCarSection) {
                        const swiperContainer = document.querySelector('.car_swiper');
                        if (swiperContainer && swiperContainer.contains(e.target)) {
                            // –ï—Å–ª–∏ —Å–∫—Ä–æ–ª–ª –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ Swiper'–∞, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–≥–æ
                            if (Math.abs(e.deltaX) > Math.abs(e.deltaY)) {
                                // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª - –ø–æ–∑–≤–æ–ª—è–µ–º Swiper'—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
                                return;
                            } else {
                                // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç
                                e.preventDefault();
                                // –ü–µ—Ä–µ–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                                window.scrollBy(0, e.deltaY * 0.5);
                            }
                        }
                    }
                }, { passive: false });
            }
        });
    }
    
    enableChat() {
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è cookies
        this.sendButton.addEventListener('click', () => this.sendMessage());
        this.chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                this.sendMessage();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        this.chatInput.addEventListener('input', () => {
            const hasText = this.chatInput.value.trim().length > 0;
            this.sendButton.classList.toggle('active', hasText);
        });
        
        // –î–µ–ª–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏
        this.chatInput.disabled = false;
        this.sendButton.disabled = false;
        this.chatInput.placeholder = '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç...';
    }
    
    disableChat() {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —á–∞—Ç –¥–æ –ø—Ä–∏–Ω—è—Ç–∏—è cookies
        this.chatInput.disabled = true;
        this.sendButton.disabled = true;
        this.chatInput.placeholder = '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–º–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ cookies';
    }
    
    generateSessionId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }
    
    blinkCookies() {
        const cookiesElement = document.querySelector('.cookies');
        if (cookiesElement) {
            cookiesElement.classList.add('blink');
            setTimeout(() => {
                cookiesElement.classList.remove('blink');
            }, 1000);
        }
    }

    async startConversation() {
        if (!localStorage.getItem('cookiesAccepted')) {
            this.blinkCookies();
            return;
        }

        console.log('üîó startConversation called');
        try {
            const response = await fetch(this.host + '/api/v1/chat/start', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({})
            });
            
            console.log('üì• Start conversation response status:', response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üì¶ Start conversation data:', data);
            
            if (data.success) {
                this.conversationId = data.conversation_id;
                this.conversationStarted = true;
                console.log('‚úÖ Conversation started:', this.conversationId);
            } else {
                throw new Error(data.error || 'Failed to start conversation');
            }
        } catch (error) {
            console.error('‚ùå Error starting conversation:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        }
    }
    
    addMessage(message, isUser = false) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat_item ${isUser ? 'right' : 'left'}`;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markdown-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
        if (!isUser) {
            messageDiv.innerHTML = this.parseMessageMarkdown(message);
        } else {
            messageDiv.textContent = message;
        }
        
        // –£–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if (!isUser) {
            const existingBotMessages = this.chatMessages.querySelectorAll('.chat_item.left');
            if (existingBotMessages.length > 1) {
                existingBotMessages[0].remove();
            }
        }
        
        this.chatMessages.appendChild(messageDiv);
        //this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞ –≤ —Å–∞–º—ã–π –Ω–∏–∑           
        $('.chat_texts').scrollTop($('.chat_texts')[0].scrollHeight);
    }
    
    parseMessageMarkdown(message) {
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const escapedMessage = message
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–≤—ë–∑–¥–æ—á–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ä
        let parsedMessage = escapedMessage.replace(/\*\*(.*?)\*\*/g, '<!DOUBLE_STAR!>$1<!DOUBLE_STAR_END!>');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∑–≤—ë–∑–¥–æ—á–∫–∏ –∫–∞–∫ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        parsedMessage = parsedMessage.replace(/\*([^*]+)\*/g, '<span class="chat-bold">$1</span>');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–≤—ë–∑–¥–æ—á–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        parsedMessage = parsedMessage.replace(/<!DOUBLE_STAR!>(.*?)<!DOUBLE_STAR_END!>/g, '<span class="chat-bold">$1</span>');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        parsedMessage = parsedMessage.replace(/\n/g, '<br>');
        
        return parsedMessage;
    }

    addMessageWithButton(message, buttonText) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'chat_item left';
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏
        const contentDiv = document.createElement('div');
        contentDiv.style.cssText = 'display: flex; flex-direction: column; gap: 10px;';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const textDiv = document.createElement('div');
        textDiv.textContent = message;
        contentDiv.appendChild(textDiv);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        const button = document.createElement('button');
        button.textContent = buttonText;
        button.style.cssText = `
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            align-self: flex-start;
            transition: all 0.3s ease;
        `;
        
        button.addEventListener('mouseover', () => {
            button.style.transform = 'translateY(-2px)';
            button.style.boxShadow = '0 4px 12px rgba(102, 126, 234, 0.4)';
        });
        
        button.addEventListener('mouseout', () => {
            button.style.transform = 'translateY(0)';
            button.style.boxShadow = 'none';
        });
        
        button.addEventListener('click', (e) => {
            console.log('üéØ Button "–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–º –∞–≤—Ç–æ" clicked');
            e.preventDefault();
            e.stopPropagation();
            this.showRecommendations();
        });
        
        contentDiv.appendChild(button);
        messageDiv.appendChild(contentDiv);
        
        // –£–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        const existingBotMessages = this.chatMessages.querySelectorAll('.chat_item.left');
        if (existingBotMessages.length > 1) {
            existingBotMessages[0].remove();
        }
        
        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    showRecommendations() {
        console.log('üîç showRecommendations called, pendingRecommendations:', this.pendingRecommendations);
        
        // –ü–ï–†–í–´–ú –î–ï–õ–û–ú –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª—å –≤ Yandex.Metrika
        console.log('üìä Sending car_transition goal...');
        if (typeof ym !== 'undefined') {
            ym(103768419, 'reachGoal', 'car_transition');
            console.log('üìä ‚úÖ Yandex.Metrika: car_transition sent successfully');
        } else {
            console.log('üìä ‚ùå Yandex.Metrika not available');
        }
        
        if (this.pendingRecommendations && this.pendingRecommendations.length > 0) {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            this.displayRecommendations(this.pendingRecommendations);
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–µ–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
            setTimeout(() => {
                this.scrollToCarsSection();
            }, 500);
            
            // –û—á–∏—â–∞–µ–º pending —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            this.pendingRecommendations = null;
        } else {
            console.warn('‚ö†Ô∏è No pending recommendations to show');
        }
    }
    
    showLoading() {
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'chat_item left loading';
        loadingDiv.textContent = '–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏...';
        loadingDiv.id = 'loadingMessage';
        this.chatMessages.appendChild(loadingDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        this.sendButton.disabled = true;
    }
    
    hideLoading() {
        const loadingMessage = document.getElementById('loadingMessage');
        if (loadingMessage) {
            loadingMessage.remove();
        }
        this.sendButton.disabled = false;
    }
    
    showError(message) {
        console.error('–û—à–∏–±–∫–∞:', message);
        this.addMessage(`–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
    }
    
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    setUIBlocked(blocked) {
        this.isSending = blocked;
        
        if (blocked) {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –¥–µ–ª–∞–µ–º –ø–æ–ª–µ —Å–µ—Ä—ã–º
            this.sendButton.disabled = true;
            this.sendButton.style.opacity = '0.5';
            this.sendButton.style.cursor = 'not-allowed';
            
            this.chatInput.style.backgroundColor = '#f5f5f5';
            this.chatInput.style.color = '#999';
            this.chatInput.placeholder = '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...';
        } else {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
            this.sendButton.disabled = false;
            this.sendButton.style.opacity = '1';
            this.sendButton.style.cursor = 'pointer';
            
            this.chatInput.style.backgroundColor = '';
            this.chatInput.style.color = '';
            this.chatInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...';
        }
    }
    
    async sendMessage() {
        if (!localStorage.getItem('cookiesAccepted')) {
            this.blinkCookies();
            return;
        }

        const message = this.chatInput.value.trim();
        if (!message || this.isSending) return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
        
        console.log('üöÄ sendMessage called with:', message);
        console.log('üîÑ conversationStarted:', this.conversationStarted);
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–µ–ª–∏ Yandex.Metrika –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞
        if (!this.conversationStarted && typeof ym !== 'undefined') {
            ym(103768419, 'reachGoal', 'chat_start');
            console.log('üìä Yandex.Metrika: chat_start');
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.setUIBlocked(true);
        
        try {
            // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏
            if (!this.conversationStarted) {
                console.log('üîó Starting conversation...');
                await this.startConversation();
                if (!this.conversationStarted) {
                    console.log('‚ùå Failed to start conversation');
                    this.setUIBlocked(false);
                    return; // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä
                }
            }
            
            this.addMessage(message, true);
            this.chatInput.value = '';
            this.sendButton.classList.remove('active'); // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
            this.showLoading();
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª–∏
            this.messageCount++;
            if (typeof ym !== 'undefined') {
                ym(103768419, 'reachGoal', 'chat_message_sent');
                console.log('üìä Yandex.Metrika: chat_message_sent', this.messageCount);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if (this.messageCount === 10) {
                    ym(103768419, 'reachGoal', 'chat_10_messages');
                    console.log('üìä Yandex.Metrika: chat_10_messages');
                }
            }
            
            console.log('üì§ Sending message to backend:', {
                message: message,
                conversation_id: this.conversationId
            });
            
            const response = await fetch(this.host + '/api/v1/chat/message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    conversation_id: this.conversationId
                })
            });
            
            console.log('üì• Response status:', response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üì¶ Response data:', data);
            
            this.hideLoading();
            
            if (data.error) {
                console.log('‚ùå Error in response:', data.error);
                this.showError(data.error);
                return;
            }
            
            this.addMessage(data.message);

            if (data.message.toLowerCase().includes("–≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥–±–æ—Ä?")) {
                // –ù–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ, –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            } else if (data.recommendations && data.recommendations.length > 0) {
                console.log('üöó Received recommendations:', data.recommendations);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª—å –æ –ø–æ–∫–∞–∑–µ –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
                if (typeof ym !== 'undefined') {
                    ym(103768419, 'reachGoal', 'car_selection_shown');
                    console.log('üìä Yandex.Metrika: car_selection_shown');
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                this.pendingRecommendations = data.recommendations;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø—Ä–æ –ø–æ–¥–±–æ—Ä —Å –∫–Ω–æ–ø–∫–æ–π
                setTimeout(() => {
                    this.addMessageWithButton("–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –í–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ - –≥–æ—Ç–æ–≤—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ï—Å–ª–∏ –æ–Ω–∏ –±—É–¥—É—Ç –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏ –Ω–∞—à —ç–∫—Å–ø–µ—Ä—Ç –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ ‚Äî –≤ –†–æ—Å—Å–∏–∏, –∏–∑-–∑–∞ —Ä—É–±–µ–∂–∞, –Ω–æ–≤—ã–µ –∏–ª–∏ —Å –ø—Ä–æ–±–µ–≥–æ–º.", "–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–º –∞–≤—Ç–æ");
                }, 1000); // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
            } else {
                console.log('‚ÑπÔ∏è No recommendations received');
            }
            
        } catch (error) {
            this.hideLoading();
            console.error('üí• Error sending message:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
        } finally {
            // –í—Å–µ–≥–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.setUIBlocked(false);
        }
    }
    
    displayRecommendations(recommendations) {
        console.log('Displaying recommendations:', recommendations);
        this.carRecommendations.innerHTML = '';
        
        recommendations.forEach((car, index) => {
            console.log('Processing car:', car);
            const carSlide = document.createElement('div');
            carSlide.className = 'swiper-slide';
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            const carData = car.car || car; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            const carTitle = `${carData.mark_name || carData.make || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞—Ä–∫–∞'} ${carData.model_name || carData.model || ''}`.trim();
            const year = carData.year_from || carData.year || '–ù–µ —É–∫–∞–∑–∞–Ω';
            const price = carData.offers_price_from || car.price_range || car.price || '–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É';
            const bodyType = carData.body_type || carData.configuration_name || '–ù–µ —É–∫–∞–∑–∞–Ω';
            const fuelType = carData.engine_type || carData.fuel_type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            const description = car.description || '';
            const carUrl = car.url || '#';
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –∏–∑ API
            const defaultImages = [
                'assets/img/cars1.png',
                'assets/img/cars2.png', 
                'assets/img/cars3.png'
            ];
            const carImage = car.image_url || defaultImages[index % defaultImages.length];
            
            carSlide.innerHTML = `
                <a href="${carUrl}" target="_blank" class="cars_item">
                    <div class="item_img">
                        <img src="${carImage}" alt="${carTitle}" onerror="this.src='${defaultImages[0]}'"> 
                    </div> 
                    <div class="item_texts">
                        <div class="item_title">${carTitle}</div> 
                        <ul>
                            <li>
                                <span>–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</span>
                                <span>${year}</span>
                            </li>
                            <li>
                                <span>–¶–µ–Ω–∞:</span>
                                <span>${typeof price === 'number' ? this.formatPrice(price) : price}</span>
                            </li>
                            ${bodyType !== '–ù–µ —É–∫–∞–∑–∞–Ω' ? `
                            <li>
                                <span>–¢–∏–ø –∫—É–∑–æ–≤–∞:</span>
                                <span>${bodyType}</span>
                            </li>` : ''}
                            ${fuelType !== '–ù–µ —É–∫–∞–∑–∞–Ω–æ' ? `
                            <li>
                                <span>–¢–æ–ø–ª–∏–≤–æ:</span>
                                <span>${fuelType}</span>
                            </li>` : ''}
                        </ul> 
                        ${description ? `<div class="item_description">${description}</div>` : ''}
                    </div>
                    <div class="item_buttons">
                        <div class="blue button book_btn" data-car="${carTitle}">–•–æ—á—É</div> 
                        <div class="white button more_options_btn">–ï—â—ë –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</div> 
                        <div class="white button expert_btn" data-car="${carTitle}">–û–±—Å—É–¥–∏—Ç—å —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º</div> 
                    </div> 
                </a>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
            const bookBtn = carSlide.querySelector('.book_btn');
            const moreOptionsBtn = carSlide.querySelector('.more_options_btn');
            const expertBtn = carSlide.querySelector('.expert_btn');
            
            if (bookBtn) {
                bookBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    this.bookCar(carTitle);
                });
            }
            
            if (moreOptionsBtn) {
                moreOptionsBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    this.showMoreOptions();
                });
            }
            
            if (expertBtn) {
                expertBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    this.contactExpert(carTitle);
                });
            }
            
            this.carRecommendations.appendChild(carSlide);
            console.log(`‚úÖ Added car slide ${index + 1}: ${carTitle}`);
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Swiper –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        setTimeout(() => {
            this.initCarSwiper();
        }, 100);
    }
    
    initCarSwiper() {
        if (this.carSwiper) {
            this.carSwiper.destroy(true, true);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤
        const slides = document.querySelectorAll('.car_swiper .swiper-slide').length;
        const shouldLoop = slides > 2; // Loop —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 2 —Å–ª–∞–π–¥–æ–≤
        
        console.log(`üîß Initializing Swiper with ${slides} slides, loop: ${shouldLoop}`);
        
        this.carSwiper = new Swiper('.car_swiper', {
            slidesPerView: 1,
            spaceBetween: 30,
            loop: shouldLoop,
            autoplay: shouldLoop ? {
                delay: 5000,
                disableOnInteraction: false,
            } : false,
            navigation: {
                nextEl: '.right_button',
                prevEl: '.left_button',
            },
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
            touchEventsTarget: 'container',
            simulateTouch: true,
            allowTouchMove: true,
            touchRatio: 1,
            touchAngle: 45,
            grabCursor: true,
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ö–∞–æ—Ç–∏—á–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
            preventInteractionOnTransition: true,
            resistanceRatio: 0.85,
            // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ touch-—Å–æ–±—ã—Ç–∏—è–º–∏
            touchStartPreventDefault: false,
            touchStartForcePreventDefault: false,
            touchMoveStopPropagation: false,
            // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–µ—è –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
            autoplay: {
                delay: 5000,
                disableOnInteraction: true,
                pauseOnMouseEnter: true,
            },
            breakpoints: {
                768: {
                    slidesPerView: 2,
                },
                1024: {
                    slidesPerView: 3,
                }
            }
        });
    }
    
    scrollToCarsSection() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å–∞–π—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–µ–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        const carsSection = document.querySelector('[data-section="5"]');
        if (carsSection) {
            console.log('üéØ Found cars section:', carsSection);
            try {
                // –° fullPage.js v2.9.7 - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Å–µ–∫—Ü–∏–∏
                if (typeof $.fn.fullpage !== 'undefined' && $.fn.fullpage.moveTo) {
                    console.log('üìç Using fullpage.moveTo(6)'); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–µ–∫—Ü–∏—è 5 = –∏–Ω–¥–µ–∫—Å 6
                    $.fn.fullpage.moveTo(6);
                }
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–ª–∏—á–∏–π –≤ API
                else if (window.fp_utils) {
                    console.log('üìç Using fp_utils.index = 5'); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–µ–∫—Ü–∏—è 5 = –∏–Ω–¥–µ–∫—Å 5
                    window.fp_utils.index = 5;
                }
                // –û–±—ã—á–Ω—ã–π —Å–∫—Ä–æ–ª–ª, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
                else {
                    console.log('üìç Using scrollIntoView fallback');
                    carsSection.scrollIntoView({ behavior: 'smooth' });
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
                setTimeout(() => {
                    const carsSection = document.querySelector('[data-section="5"]');
                    if (carsSection) {
                        carsSection.style.display = 'block';
                        carsSection.style.visibility = 'visible';
                        carsSection.style.opacity = '1';
                        console.log('‚úÖ Cars section made visible');
                    }
                }, 1000);
            } catch (error) {
                console.error('Error scrolling to cars section:', error);
                // –§–æ–ª–±—ç–∫ –Ω–∞ –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–æ–ª–ª
                carsSection.scrollIntoView({ behavior: 'smooth' });
            }
        } else {
            console.error('‚ùå Cars section not found with selector [data-section="5"]');
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            const altSection = document.querySelector('.cars') || document.querySelector('.section.cars');
            if (altSection) {
                console.log('üìç Using alternative selector for cars section');
                altSection.scrollIntoView({ behavior: 'smooth' });
            }
        }
    }
    
    formatPrice(price) {
        if (typeof price === 'number') {
            return new Intl.NumberFormat('ru-RU', {
                style: 'currency',
                currency: 'RUB',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(price);
        }
        return price.toString();
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    bookCar(carTitle) {
        console.log(`–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ${carTitle}`);
        this.openModal('book', carTitle);
    }
    
    showMoreOptions() {
        console.log('–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        alert('–§—É–Ω–∫—Ü–∏—è "–ë–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤" –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    }
    
    contactExpert(carTitle) {
        console.log(`–û–±—Å—É–¥–∏—Ç—å —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º: ${carTitle}`);
        this.openModal('expert', carTitle);
    }

    openModal(action, carTitle) {
        const modal = document.querySelector('.modal.booking');
        if (!modal) {
            console.error('Modal not found');
            return;
        }

        const modalTitle = modal.querySelector('.modal_title');
        const selectedCarInput = modal.querySelector('input[name="car"]');
        const actionInput = modal.querySelector('input[name="action"]');
        
        if (selectedCarInput) selectedCarInput.value = carTitle;
        if (actionInput) actionInput.value = action;
        
        if (modalTitle) {
            if (action === 'book') {
                modalTitle.textContent = `–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å ${carTitle}`;
            } else {
                modalTitle.textContent = `–û–±—Å—É–¥–∏—Ç—å ${carTitle} —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º`;
            }
        }
        
        modal.classList.add('active');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª—å –≤ Yandex.Metrika
        if (typeof ym !== 'undefined') {
            ym(103768419, 'reachGoal', 'modal_open');
            console.log('üìä Yandex.Metrika: modal_open (from chat-integration)');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    setTimeout(() => {
        window.carMatchChat = new CarMatchChat();
    }, 1000);
});